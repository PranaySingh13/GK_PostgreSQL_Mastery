===================
PostgreSQL
===================
PostgreSQL is a powerful, open source object-relational database system with over
35 years of active development that has earned it a strong reputation for 
reliability, feature robustness, and performance.

===================
Section 1. Querying Data
===================
Select – show you how to query data from a single table.

Column aliases – learn how to assign temporary names to columns or expressions 
in a query.

Order By – guide you on how to sort the result set returned from a query.

Select Distinct  – provide you with a clause that removes duplicate rows in the 
result set.

===================
PostgreSQL SELECT
===================
PostgreSQL SELECT statement syntax
Let’s start with the basic form of the SELECT statement that retrieves data from 
a single table.

The following illustrates the syntax of the SELECT statement:

SELECT
   select_list
FROM
   table_name;

Let’s examine the SELECTstatement in more detail:

First, specify a select list that can be a column or a list of columns in a table 
from which you want to retrieve data. If you specify a list of columns, you need 
to place a comma (,) between two columns to separate them. If you want to select 
data from all the columns of the table, you can use an asterisk (*) shorthand 
instead of specifying all the column names. The select list may also contain 
expressions or literal values.

Second, specify the name of the table from which you want to query data after 
the FROM keyword.
The FROM clause is optional. If you do not query data from any table, 
you can omit the FROM clause in the SELECT statement.

PostgreSQL evaluates the FROM clause before the SELECT clause in the SELECT statement:
FROM => SELECT

Note that the SQL keywords are case-insensitive. It means that SELECT is equivalent 
to select or Select. By convention, we will use all the SQL keywords in 
uppercase to make the queries easier to read.

PostgreSQL SELECT examples
Let’s take a look at some examples of using PostgreSQL SELECT statement.

We will use the following customer table in the sample database for the demonstration.

1) Using PostgreSQL SELECT statement to query data from one column example
This example uses the SELECT statement to find the first names of all customers 
from the customer table:

SELECT first_name FROM customer;

Notice that we added a semicolon (;) at the end of the SELECT statement. 
The semicolon is not a part of the SQL statement. It is used to signal PostgreSQL 
the end of an SQL statement. The semicolon is also used to separate two SQL 
statements.

2) Using PostgreSQL SELECT statement to query data from multiple columns example
Suppose you just want to know the first name, last name and email of customers, 
you can specify these column names in the SELECT clause as shown in the 
following query:

SELECT first_name,last_name,email FROM customer;

3) Using PostgreSQL SELECT statement to query data from all columns of a table 
example
The following query uses the SELECT statement to select data from all columns 
of the customer table:

SELECT * FROM customer;

In this example, we used an asterisk (*) in the SELECT clause, which is a 
shorthand for all columns. Instead of listing all columns in the SELECT clause, 
we just used the asterisk (*) to save some typing.

However, it is not a good practice to use the asterisk (*) in the SELECT 
statement when you embed SQL statements in the application code like Python, 
Java, Node.js, or PHP due to the following reasons:

Database performance. Suppose you have a table with many columns and a lot of 
data, the SELECT statement with the asterisk (*) shorthand will select data from 
all the columns of the table, which may not be necessary to the application.

Application performance. Retrieving unnecessary data from the database increases 
the traffic between the database server and application server. In consequence,
 your applications may be slower to respond and less scalable.
Because of these reasons, it is a good practice to explicitly specify the column 
names in the SELECT clause whenever possible to get only necessary data from the 
database.

And you should only use the asterisk (*) shorthand for the ad-hoc queries that 
examine data from the database.

4) Using PostgreSQL SELECT statement with expressions example
The following example uses the SELECT statement to return full names and emails 
of all customers:

SELECT first_name || ' ' || last_name,email FROM customer;

In this example, we used the concatenation operator || to concatenate the first 
name, space, and last name of every customer.We will  use column aliases to assign
expressions more meaningful names.

5) Using PostgreSQL SELECT statement with expressions example
The following example uses the SELECT statement with an expression. It omits 
the FROM clause:
SELECT 5*3;

===================
PostgreSQL Column Alias
===================
A column alias allows you to assign a column or an expression in the select list 
of a SELECT statement a temporary name. The column alias exists temporarily 
during the execution of the query.

The following illustrates the syntax of using a column alias:

SELECT column_name AS alias_name
FROM table_name;

In this syntax, the column_name is assigned an alias alias_name. The AS keyword is optional so you can omit it like this:

SELECT column_name alias_name
FROM table_name;

The following syntax illustrates how to set an alias for an expression in the 
SELECT clause:

SELECT expression AS alias_name
FROM table_name;

The main purpose of column aliases is to make the headings of the output of a 
query more meaningful.

1) Assigning a column alias to a column example
The following query returns the first names and last names of all customers 
from the customer table.

If you want to rename the last_name heading, you can assign it a new name 
using a column alias like this:

SELECT first_name, last_name AS surname FROM customer;

Or you can make it shorter by removing the AS keyword as follow

SELECT first_name, last_name surname FROM customer;

2) Assigning a column alias to an expression example
The following query returns the full names of all customers. It constructs the 
full name by concatenating the first name, space, and the last name:
Note that in PostgreSQL, you use the || as the concatenating operator that 
concatenates one or more strings into a single string.

SELECT first_name || ' ' || last_name AS full_name FROM customer;

3) Column aliases that contain spaces
If a column alias contains one or more spaces, you need to surround it with double quotes like this:

column_name AS "column alias"
SELECT first_name || ' ' || last_name AS "Full Name" FROM customer;

Summary
Assign a column or an expression a column alias using the syntax column_name AS 
alias_name or expression AS alias_name.

The AS keyword is optional.

Use double quotes (“) to surround a column alias that contains spaces.


